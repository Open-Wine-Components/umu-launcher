[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "umu-launcher"
dynamic = ["version"]
description = "Unified Linux Wine Game Launcher."
authors = [
    { name = "GloriousEggroll", email = "gloriouseggroll@gmail.com" },
    { name = "Mathieu Comandon", email = "strycore@gmail.com" },
    { name = "PaweÅ‚ Lidwin", email = "lidwinpawel@gmail.com" },
    { name = "mirkobrombin", email = "send@mirko.pm" },
    { name = "Flavio F Lima", email = "flavioislima@users.noreply.github.com" },
]
maintainers = [
    { name = "GloriousEggroll", email = "gloriouseggroll@gmail.com" },
    { name = "R1kaB3rN", email = "100738684+R1kaB3rN@users.noreply.github.com" },
]
requires-python = ">=3.10"
license = { file = "README.md" }
keywords = ["umu", "umu-launcher"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
urls = { repository = "https://github.com/Open-Wine-Components/umu-launcher" }
# Note: urllib3 is a vendored dependency. When using our Makefile, it will be
# installed automatically.
dependencies = ["python-xlib>=0.33", "urllib3>=2.0.0,<3.0.0"]

[project.optional-dependencies]
# Recommended
# For network requests, use the system's CA bundle instead of certifi's
cli = ["truststore"]

[project.scripts]
umu-run = "umu.__main__:main"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/.git",
    "/umu/__pycache__",
    "/.mypy_cache",
    "/.ruff_cache",
]

[tool.hatch.build.targets.wheel]
packages = ["umu"]
exclude = [
    "/umu/umu-launcher",
    "/umu/__pycache__",
    "/umu/ruff.toml",
    "/umu/umu_version.json.in",
    "/umu/umu-run.in",
    "/umu/umu_test.py",
    "/umu/umu_test_plugins.py",
]

[tool.hatch.version]
path = "umu/__init__.py"

[tool.isort]
profile = "black"
py_version = 312

[tool.mypy]
python_version = "3.10"
warn_return_any = true
ignore_missing_imports = true
disable_error_code = [
    # Allow redefinitions since we redefine an error variable before raising exceptions
    "no-redef",
]
exclude = [
    'umu/umu_test.py',
    'umu/umu_test_plugins.py',
    'subprojects',
    'builddir',
    'dist',
]

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = [
    "black>=24.4.2",
    "GitPython>=3.1.40",
    "isort>=5.13.2",
    "mypy>=1.10.0",
    "ruff>=0.4.2",
    "toml-sort>=0.23.1",
    "types-PyYAML>=6.0.12.20240311",
]

[tool.pdm.scripts]
# static analysis
format = { composite = [
    "black umu/ tests/",
    "isort --settings-path ./pyproject.toml umu/ tests/",
    "toml-sort -i ./pyproject.toml",
] }
lint-fix = "ruff check --config ./pyproject.toml . --fix"
type-check = "mypy --config-file ./pyproject.toml --enable-incomplete-feature=NewGenericSyntax umu/"

[tool.pdm.version]
fallback_version = "0.0.0"
source = "scm"
write_template = "__version__: str = \"{}\"\n"
write_to = "code_review/_version.py"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "builddir",
    "subprojects",
]
# Same as Black.
line-length = 88
indent-width = 4
target-version = "py310"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
select = [
    # Ruff defaults
    "E4",
    "E7",
    "E9",
    "F",
    # Ensure we're being smart when raising, returning or breaking
    "RET",
    # Enforce pydocstyle
    "W",
    # Enforce more formats
    # See https://docs.astral.sh/ruff/rules/#warning-w
    "D",
    # Enforce pathlib when working with paths
    "PTH",
    # Ensure exceptions are not blindly caught
    "BLE001",
    # Enforce flake8 error messages
    "EM",
    # Ensure we're being smart when working with archives/executing shell commands
    # Or when dealing with input returned from web services (e.g., Github)
    "S",
    # Ensure we do not exceed our line length
    "E501",
    # Enforce types for variables
    "ANN",
    # Ensure we're smart when accessing dicts
    "RUF019",
    # Enforce not concatenating collections
    "RUF005",
    # Flag unused qa directives
    "RUF100",
    # Enforce flake8 concat strings because the + operator can be unnecessary
    "ISC",
    # Ensure we're smart when using the logger
    # Specific log statements should execute only when necessary
    "G",
    # Prefer collapsing nested if-elif in the else branch
    "PLR5501",
    # Simply and catch redundant logic
    "SIM",
    # Ensure no useless arguments/paramaters
    "ARG",
    # Ensure explicit check= for subprocess.run to avoid silent failures
    "PLW1510",
    "UP",
    "FURB",
    # Sort imports
    "I",
    # Ensure we're smart when using list comprehensions
    "C4",
    # Ensure we do not shadow any Python built-in functionality
    "A",
    # Ensure there's no empty comments
    "PLR2044",
    # Prefer refactoring nested if-else to elif
    "PLR5501",
    # Enforce using set literal membership than other data structures
    "PLR6201",
    # Prefer creating constants instead of magic values
    "PLR2004",
    # Refactor long equality expressions to membership tests
    # Example:
    # i == 'foo' or i == 'bar' or i == 'baz'
    #
    # Use instead:
    # i in {'foo', 'bar', 'baz'}
    "PLR1714",
    # Ensure our pyproject.toml follows relevant PEPs whenever we make changes to it
    "RUF200",
    # Parenthesize chained operations in expressions.
    # Example:
    # a, b, c = 1, 0, 2
    # x = a or b and c
    #
    # Use instead:
    # a, b, c = 1, 0, 2
    # x = a or (b and c)
    "RUF021",
    # When importing modules, ensure we do not shadow built-ins
    "A004",
]
ignore = [
    # Format
    "D100",
    "D203",
    "D213",
    "E501",
    # Ignore untrusted input for subprocess
    # This raises false negatives and currently we shell out when:
    # Using Zenity or executing the final command
    # In the above cases, we *always* verify the existence of the command/files
    "S603",
    # We use a static location for the crash report dir: /tmp/umu_crashreports
    "S108",
    # Don't flag missing type for self
    "ANN201",
    # Single line implicit concat conflicts with the formatter
    "ISC001",
    "S404",
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
logger-objects = ["umu.umu_log.log"]

[tool.ruff.lint.per-file-ignores]
"umu_test.py" = ["ANN"]
"umu_test_plugins.py" = ["ANN"]
