PROJECT := umu-launcher

# Define the interpreters to use to prevent shebang complaints
PYTHON_INTERPRETER = /usr/bin/env python3

# If this is changed to umu (uppercase), `uninstall` target will also remove the SLR directory
INSTALLDIR ?= umu

OBJDIR := builddir

PREFIX      ?= /usr
BINDIR      := $(PREFIX)/bin
LIBDIR      := $(PREFIX)/lib
DATADIR     := $(PREFIX)/share
MANDIR      := $(DATADIR)/man
PYTHONDIR   := $(shell $(PYTHON_INTERPRETER) -c "import site; print(site.getsitepackages()[0])")

DESTDIR ?=
USERINSTALL ?= xfalse
FLATPAK ?= xfalse

.PHONY: all
ifeq ($(FLATPAK), xtrue)
all: umu-dist umu-launcher umu-vendored
endif

.PHONY: install
ifeq ($(USERINSTALL), xtrue)
SOURCE_DATE_EPOCH = $(shell LC_ALL=C date --date='@1580601600')
all: zipapp
install: zipapp-install
else
all: umu-dist umu-docs umu-launcher umu-vendored
install: umu-install umu-launcher-install umu-vendored-install
endif


$(OBJDIR)/.build-umu-docs: | $(OBJDIR)
	$(info :: Building umu man pages )
	scdoc < docs/umu.1.scd > $(OBJDIR)/umu.1
	scdoc < docs/umu.5.scd > $(OBJDIR)/umu.5
	touch $(@)

.PHONY: umu-docs
umu-docs: $(OBJDIR)/.build-umu-docs

umu-docs-install: umu-docs
	$(info :: Installing umu man pages )
	install -d $(DESTDIR)$(MANDIR)/man1
	install -d $(DESTDIR)$(MANDIR)/man5
	install -m644 $(OBJDIR)/umu.1 $(DESTDIR)$(MANDIR)/man1/umu.1
	install -m644 $(OBJDIR)/umu.5 $(DESTDIR)$(MANDIR)/man5/umu.5


$(OBJDIR)/.build-umu-dist: | $(OBJDIR)
	$(info :: Building umu )
	$(PYTHON_INTERPRETER) -m build --wheel --skip-dependency-check --no-isolation --outdir=$(OBJDIR)
	touch $(@)

.PHONY: umu-dist
umu-dist: $(OBJDIR)/.build-umu-dist

umu-dist-install: umu-dist
	$(info :: Installing umu )
	install -d $(DESTDIR)$(PYTHONDIR)/$(INSTALLDIR)
	$(PYTHON_INTERPRETER)  -m installer --destdir=$(DESTDIR) $(OBJDIR)/*.whl

ifeq ($(FLATPAK), xtrue)
umu-install: umu-dist-install umu-delta-install
else
umu-install: umu-dist-install umu-delta-install umu-docs-install 
endif

ifeq ($(FLATPAK), xtrue)
UMU_LAUNCHER_COMMAND = org.openwinecomponents.umu.umu-launcher
else
UMU_LAUNCHER_COMMAND = $(BINDIR)/umu-run
endif

# umu-launcher is separate to allow control over installing the bin target
$(OBJDIR)/.build-umu-launcher: | $(OBJDIR)
	$(info :: Building umu-launcher )
	sed 's|##INSTALL_PATH##|$(UMU_LAUNCHER_COMMAND)|g' umu/umu-launcher/umu-run.in > $(OBJDIR)/umu-launcher-run
	touch $(@)

.PHONY: umu-launcher
umu-launcher: $(OBJDIR)/.build-umu-launcher

umu-launcher-bin-install: umu-launcher
	install -d $(DESTDIR)$(DATADIR)/steam/compatibilitytools.d/umu-launcher
	install -Dm 755 $(OBJDIR)/$(<)-run $(DESTDIR)$(DATADIR)/steam/compatibilitytools.d/umu-launcher/umu-run

umu-launcher-dist-install:
	$(info :: Installing umu-launcher )
	install -d $(DESTDIR)$(DATADIR)/steam/compatibilitytools.d/umu-launcher
	install -Dm 644 umu/umu-launcher/compatibilitytool.vdf -t $(DESTDIR)$(DATADIR)/steam/compatibilitytools.d/umu-launcher
	install -Dm 644 umu/umu-launcher/toolmanifest.vdf      -t $(DESTDIR)$(DATADIR)/steam/compatibilitytools.d/umu-launcher

umu-launcher-install: umu-launcher-dist-install umu-launcher-bin-install


$(OBJDIR)/.build-umu-vendored: | $(OBJDIR)
	$(info :: Building vendored dependencies )
	python3 -m pip install urllib3 -t $(OBJDIR)
	python3 -m pip install pyzstd  --config-settings="--build-option=--dynamic-link-zstd" -t $(OBJDIR)

.PHONY: umu-vendored
umu-vendored: $(OBJDIR)/.build-umu-vendored

umu-vendored-install: umu-vendored
	$(info :: Installing subprojects )
	install -d $(DESTDIR)$(PYTHONDIR)/umu/_vendor
	cp      -r $(OBJDIR)/urllib3 $(DESTDIR)$(PYTHONDIR)/umu/_vendor
	cp      -r $(OBJDIR)/pyzstd  $(DESTDIR)$(PYTHONDIR)/umu/_vendor

$(OBJDIR):
	@mkdir -p $(@)


.PHONY: clean
clean:
	$(info :: Cleaning source directory )
	@rm -rf -v ./$(RELEASEDIR) $(RELEASEDIR).tar.gz


RELEASEDIR := $(PROJECT)-$(shell git describe --abbrev=0)
$(RELEASEDIR):
	mkdir -p $(@)

.PHONY: release
release: $(RELEASEDIR) | zipapp
	$(info :: Creating source distribution for release )
	mkdir -p $(<)
	rm -rf umu/__pycache__
	cp -r umu packaging Makefile.in configure.sh README.md LICENSE $(<)
	tar -cvzf $(<).tar.gz $(<)
	cp -a $(ZIPAPP) .
	sha512sum umu-run > umu-run.sha512sum


.PHONY: uninstall
# NEVER use a wildcard here
uninstall:
	$(info :: Removing $(INSTALLDIR) files in $(DESTDIR)$(BINDIR) )
	@rm -rf -v --preserve-root=all $(DESTDIR)$(BINDIR)/umu-run


ZIPAPP := $(OBJDIR)/umu-run
ZIPAPP_STAGING := $(OBJDIR)/zipapp_staging
ZIPAPP_VENV := $(OBJDIR)/zipapp_venv

$(OBJDIR)/.build-zipapp: | $(OBJDIR)
	$(info :: Building umu-launcher as zipapp )
	$(PYTHON_INTERPRETER) -m venv $(ZIPAPP_VENV)
	. $(ZIPAPP_VENV)/bin/activate && python3 -m pip install -t "$(ZIPAPP_STAGING)" -U --no-compile . truststore
	rm -r "$(ZIPAPP_STAGING)"/bin
	cp umu/__main__.py "$(ZIPAPP_STAGING)"
	find "$(ZIPAPP_STAGING)" -exec touch -h -d "$(SOURCE_DATE_EPOCH)" {} +
	. $(ZIPAPP_VENV)/bin/activate && python3 -m zipapp $(ZIPAPP_STAGING) -o $(ZIPAPP) -p "$(PYTHON_INTERPRETER)" -c
	touch -d "$(SOURCE_DATE_EPOCH)" $(ZIPAPP)
	touch $(@)

.PHONY: zipapp
zipapp: $(OBJDIR)/.build-zipapp

zipapp-install: zipapp
	$(info :: Installing umu-launcher as zipapp )
	install -d $(DESTDIR)$(PREFIX)/bin
	install -Dm755 -p $(ZIPAPP) $(DESTDIR)$(BINDIR)
	@echo "Standalone application 'umu-run' created at '$(DESTDIR)$(PREFIX)/bin'"

PYTHON_PLATFORM_TAG = $(shell $(PYTHON_INTERPRETER) -c 'import sysconfig; print(sysconfig.get_config_var("EXT_SUFFIX"))')

$(OBJDIR)/.build-umu-delta: | $(OBJDIR)
	$(info :: Building delta dependencies )
	cargo build -r
	cp -a ./target/release/libumu_delta.so $(OBJDIR)/umu_delta$(PYTHON_PLATFORM_TAG)

.PHONY: umu-delta
umu-delta: $(OBJDIR)/.build-umu-delta

umu-delta-install: umu-delta
	$(info :: Installing delta dependencies )
	install -Dm755 $(OBJDIR)/umu_delta$(PYTHON_PLATFORM_TAG) $(DESTDIR)$(PYTHONDIR)/$(INSTALLDIR)/umu_delta$(PYTHON_PLATFORM_TAG)

# vim: ft=make
