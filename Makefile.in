PROJECT := umu-launcher

# Define the interpreters to use to prevent shebang complaints
PYTHON_INTERPRETER = /usr/bin/python3
SHELL_INTERPRETER = /usr/bin/sh

# If this is changed to umu (uppercase), `uninstall` target will also remove the SLR directory
INSTALLDIR ?= umu

OBJDIR := builddir

PREFIX      ?= /usr
BINDIR      := $(PREFIX)/bin
LIBDIR      := $(PREFIX)/lib
DATADIR     := $(PREFIX)/share
MANDIR      := $(DATADIR)/man
PYTHONDIR   := $(shell $(PYTHON_INTERPRETER) -c "import site; print(site.getsitepackages()[0])")

DESTDIR ?=
USERINSTALL ?= xfalse
FLATPAK ?= xfalse

.PHONY: all
ifeq ($(FLATPAK), xtrue)
all: version umu umu-launcher
endif

ifeq ($(USERINSTALL), xfalse)
all: version umu umu-docs umu-launcher
endif

.PHONY: install
ifeq ($(USERINSTALL), xtrue)
SOURCE_DATE_EPOCH = $(shell LC_ALL=C date --date='@1580601600')
install: zipapp-install
else
install: umu-install umu-launcher-install fix_shebangs
endif

fix_shebangs:
	$(info :: Fixing shebangs in $(DESTDIR)... )
	find $(DESTDIR) -type f -name "*.py" -exec sed -i '1s|^#!/usr/bin/python\b|#!$(PYTHON_INTERPRETER)|' {} \;
	find $(DESTDIR) -type f -name "*.py" -exec sed -i '1s|^#!/usr/bin/env python\b|#!/usr/bin/env $(PYTHON_INTERPRETER)|' {} \;
	find $(DESTDIR) -type f -name "*.sh" -exec sed -i '1s|^#!/usr/bin/python\b|#!$(PYTHON_INTERPRETER)|' {} \;
	find $(DESTDIR) -type f -name "*.sh" -exec sed -i '1s|^#!/usr/bin/env python\b|#!/usr/bin/env $(PYTHON_INTERPRETER)|' {} \;
	find $(DESTDIR) -type f -name "umu-run" -exec sed -i '1s|^#!/usr/bin/python\b|#!$(PYTHON_INTERPRETER)|' {} \;
	find $(DESTDIR) -type f -name "umu-run" -exec sed -i '1s|^#!/usr/bin/env python\b|#!/usr/bin/env $(PYTHON_INTERPRETER)|' {} \;
	find $(DESTDIR) -type f -name "*.sh" -exec sed -i '1s|^#!/usr/bin/env sh|#!$(SHELL_INTERPRETER)|' {} \;
	find $(DESTDIR) -type f -name "umu-run" -exec sed -i '1s|^#!/usr/bin/env sh|#!$(SHELL_INTERPRETER)|' {} \;

# Special case, do this inside the source directory for release distribution
umu/umu_version.json: umu/umu_version.json.in
	$(info :: Updating $(@) )
	cp $(<) $(<).tmp
	sed 's|##UMU_VERSION##|$(shell git describe --always --long --tags)|g' -i $(<).tmp
	mv $(<).tmp $(@)

.PHONY: version
version: umu/umu_version.json

version-install: version
	$(info :: Installing umu_version.json )
	install -d $(DESTDIR)$(PYTHONDIR)/$(INSTALLDIR)
	install -Dm 644 umu/umu_version.json -t $(DESTDIR)$(PYTHONDIR)/$(INSTALLDIR)


$(OBJDIR)/.build-umu-docs: | $(OBJDIR)
	$(info :: Building umu man pages )
	scdoc < docs/umu.1.scd > $(OBJDIR)/umu.1
	scdoc < docs/umu.5.scd > $(OBJDIR)/umu.5
	touch $(@)

.PHONY: umu-docs
umu-docs: $(OBJDIR)/.build-umu-docs

umu-docs-install: umu-docs
	$(info :: Installing umu man pages )
	install -d $(DESTDIR)$(MANDIR)/man1
	install -d $(DESTDIR)$(MANDIR)/man5
	install -m644 $(OBJDIR)/umu.1 $(DESTDIR)$(MANDIR)/man1/umu.1
	install -m644 $(OBJDIR)/umu.5 $(DESTDIR)$(MANDIR)/man5/umu.5


$(OBJDIR)/.build-umu-dist: | $(OBJDIR)
	$(info :: Building umu )
	$(PYTHON_INTERPRETER) -m build --wheel --skip-dependency-check --no-isolation --outdir=$(OBJDIR)
	touch $(@)

.PHONY: umu-dist
umu-dist: $(OBJDIR)/.build-umu-dist

umu-dist-install: umu-dist
	$(info :: Installing umu )
	install -d $(DESTDIR)$(PYTHONDIR)/$(INSTALLDIR)
	$(PYTHON_INTERPRETER)  -m installer --destdir=$(DESTDIR) $(OBJDIR)/*.whl

ifeq ($(FLATPAK), xtrue)
umu-install: version-install umu-dist-install
else
umu-install: version-install umu-dist-install umu-docs-install
endif

ifeq ($(FLATPAK), xtrue)
UMU_LAUNCHER_COMMAND = org.openwinecomponents.umu.umu-launcher
else
UMU_LAUNCHER_COMMAND = $(PYTHONDIR)/umu/umu_run.py
endif

# umu-launcher is separate to allow control over installing the bin target
$(OBJDIR)/.build-umu-launcher: | $(OBJDIR)
	$(info :: Building umu-launcher )
	sed 's|##INSTALL_PATH##|$(UMU_LAUNCHER_COMMAND)|g' umu/umu-launcher/umu-run.in > $(OBJDIR)/umu-launcher-run
	touch $(@)

.PHONY: umu-launcher
umu-launcher: $(OBJDIR)/.build-umu-launcher

umu-launcher-bin-install: umu-launcher
	install -d $(DESTDIR)$(DATADIR)/steam/compatibilitytools.d/umu-launcher
	install -Dm 755 $(OBJDIR)/$(<)-run $(DESTDIR)$(DATADIR)/steam/compatibilitytools.d/umu-launcher/umu-run

umu-launcher-dist-install:
	$(info :: Installing umu-launcher )
	install -d $(DESTDIR)$(DATADIR)/steam/compatibilitytools.d/umu-launcher
	install -Dm 644 umu/umu-launcher/compatibilitytool.vdf -t $(DESTDIR)$(DATADIR)/steam/compatibilitytools.d/umu-launcher
	install -Dm 644 umu/umu-launcher/toolmanifest.vdf      -t $(DESTDIR)$(DATADIR)/steam/compatibilitytools.d/umu-launcher

umu-launcher-install: umu-launcher-dist-install umu-launcher-bin-install


$(OBJDIR)/.build-umu-subprojects: | $(OBJDIR)
	$(info :: Building subprojects )
	pip3 install -r requirements.in -t $(OBJDIR)

.PHONY: umu-subprojects
umu-subprojects: $(OBJDIR)/.build-umu-subprojects

umu-subprojects-install:
	$(info :: Installing subprojects )
	install -d $(DESTDIR)$(PYTHONDIR)
	cp      -r $(OBJDIR)/*-info     $(DESTDIR)$(PYTHONDIR)
	cp      -r $(OBJDIR)/Xlib       $(DESTDIR)$(PYTHONDIR)
	cp      -r $(OBJDIR)/filelock   $(DESTDIR)$(PYTHONDIR)
	cp         $(OBJDIR)/six.py     $(DESTDIR)$(PYTHONDIR)

$(OBJDIR):
	@mkdir -p $(@)


.PHONY: clean
clean:
	$(info :: Cleaning source directory )
	@rm -rf -v $(OBJDIR) umu/umu_version.json ./$(RELEASEDIR) $(RELEASEDIR).tar.gz


RELEASEDIR := $(PROJECT)-$(shell git describe --abbrev=0)
$(RELEASEDIR):
	mkdir -p $(@)

.PHONY: release
release: $(RELEASEDIR) | version
	$(info :: Creating source distribution for release )
	mkdir -p $(<)
	rm -rf umu/__pycache__
	cp -r umu packaging Makefile.in configure.sh README.md LICENSE $(<)
	tar -cvzf $(<).tar.gz $(<)


.PHONY: uninstall
# NEVER use a wildcard here
uninstall:
	$(info :: Removing $(INSTALLDIR) files in $(DESTDIR)$(BINDIR) )
	@rm -rf -v --preserve-root=all $(DESTDIR)$(BINDIR)/umu-run
	$(info :: Removing $(INSTALLDIR) directory in $(DESTDIR)$(DATADIR) )
	@rm -rf -v --preserve-root=all $(DESTDIR)$(DATADIR)/$(INSTALLDIR)


ZIPAPP := $(OBJDIR)/umu-run
ZIPAPP_STAGING := $(OBJDIR)/umu-run_staging

$(OBJDIR)/.build-zipapp: | $(OBJDIR)
	$(info :: Building umu-launcher as zipapp )
	$(PYTHON_INTERPRETER) -m pip install -t "$(ZIPAPP_STAGING)" -U --no-compile .
	cp umu/umu_version.json.in umu/umu_version.json.in.tmp
	sed 's|##UMU_VERSION##|$(shell git describe --always --long --tags)|g' -i umu/umu_version.json.in.tmp
	mv umu/umu_version.json.in.tmp "$(ZIPAPP_STAGING)"/umu/umu_version.json
	cp umu/__main__.py "$(ZIPAPP_STAGING)"
	# Make zipapp reproducible
	find "$(ZIPAPP_STAGING)" -exec touch -h -d "$(SOURCE_DATE_EPOCH)" {} +
	touch $(@)

.PHONY: zipapp-install
build-zipapp: $(OBJDIR)/.build-zipapp

zipapp-install: build-zipapp
	$(info :: Installing umu-launcher as zipapp )
	install -d $(PREFIX)/opt/$(INSTALLDIR)
	$(PYTHON_INTERPRETER) -m zipapp $(ZIPAPP_STAGING) -o $(ZIPAPP) -p "$(PYTHON_INTERPRETER)" -c
	touch -d "$(SOURCE_DATE_EPOCH)" $(ZIPAPP)
	mv $(ZIPAPP) $(PREFIX)/opt/$(INSTALLDIR)/
	@echo "Standalone application created: $(ZIPAPP))"

# vim: ft=make
